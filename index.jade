mixin check
    i.fa.fa-check-circle
mixin external
    i.fa.fa-external-link
mixin magic
    i.fa.fa-magic
mixin warn
    i.fa.fa-exclamation-triangle
mixin user
    i.fa.fa-user
mixin users
    i.fa.fa-users
mixin hierarchy
    i.fa.fa-sitemap.fa-rotate-180
mixin download
    i.fa.fa-cloud-download
mixin keyboard
    i.fa.fa-keyboard-o
mixin lock
    i.fa.fa-lock
mixin td_check
    td(style="text-align: center; ")
        i.fa.fa-check-circle
mixin td_circle
    td
        &nbsp;
mixin tip
    span.fa-stack.pull-left.tip
        i.fa.fa-circle.fa-stack-2x
        i.fa.fa-key.fa-stack-1x.fa-inverse

doctype html
html(lang="en")
    head
        meta(charset="utf-8")
        title Boxen Overview

        meta(name="description", content="Boxen Overview")

        include fragments/header.jade

    body
        .reveal
            .slides
                section.title-slide
                    h2(style="font-size: 120px;") Boxen Overview
                    h3 Powering Workstations With Git & Puppet
                    p
                        small Created by &nbsp;
                            a(href="https://github.com/jdigger/") Jim Moore
                            span= " / "
                            a(href="http://twitter.com/jdiggerj") @jdiggerj
                    p
                        img.collabocats(src="images/collabocats.jpg")

                include fragments/why_boxen.jade

                section
                    h1 Requirements

                section
                    .vcenter
                        ul
                            li Mac OS X 10.8+ only
                            li XCode CLI (slightly tricky pre-Mavericks)

                section
                    .vcenter
                        h2 Getting Started: The Bootstrap

                        pre
                            code.bash.
                                sudo mkdir -p /opt/boxen
                                sudo chown ${USER}:staff /opt/boxen
                                git clone [your_boxen_repo] /opt/boxen/repo
                                cd /opt/boxen/repo
                                ./script/boxen [--no-fde]
                        p * defaults to Full Disk Encryption

                section
                    .vcenter
                        h2 Alternate: Boxen Web

                        ul
                            li <a href="https://github.com/boxen/boxen-web">https://boxen.github.com/boxen-web</a>
                                ul
                                    li uses heroku to provide customized homepage & OAuth

                section
                    h1 Primary Components

                section.software
                    .vcenter
                        h2 Software

                        table
                            tbody
                                tr
                                    td GitHub
                                    td version control and user management
                                tr
                                    td Puppet
                                    td system configuration
                                tr
                                    td Puppet Librarian
                                    td module management for Puppet
                                tr
                                    td Homebrew
                                    td provides "most" of the software
                                tr
                                    td Ruby (rbenv)
                                    td most of the scripting

                section.providers
                    .vcenter
                        h2 Software Package Providers

                        p There are many "providers" of software. Some examples:

                        table
                            tbody
                                tr
                                    td homebrew
                                    td the default for Boxen, it's one of the most fully capable
                                tr
                                    td appdmg
                                    td if *.dmg contains *.app to drag into /Applications
                                tr
                                    td appdmg_eula
                                    td if *.dmg asks for a license agreement when it is opened and contains *.app to drag into /Applications
                                tr
                                    td pkgdmg
                                    td if *.pkg contains installer
                                tr
                                    td compressed_app
                                    td if *.zip to unzip & place into /Applications
                        p Other sources include <b>gem</b>, <b>npm</b>, <b>pip</b>, ...

                section.provider-features
                    .vcenter
                        h2 Provider Features

                        p The OS X packaging providers are, in general, incredibly "limited"

                section.provider-features
                    .vcenter
                        p By definition, providers install software. Some can do more:

                        table
                            thead
                                th Provider
                                th Uninstall
                                th Versionable
                                th Updatable
                            tbody
                                tr
                                    td appdmg
                                    +td_circle
                                    +td_circle
                                    +td_circle
                                tr
                                    td appdmg_eula
                                    +td_circle
                                    +td_circle
                                    +td_circle
                                tr
                                    td compressed_app
                                    +td_check
                                    +td_circle
                                    +td_circle
                                tr
                                    td compressed_pkg
                                    +td_circle
                                    +td_circle
                                    +td_circle
                                tr
                                    td homebrew
                                    +td_check
                                    +td_check
                                    +td_check
                                tr
                                    td macports
                                    +td_check
                                    +td_check
                                    +td_check
                                tr
                                    td pkgdmg
                                    +td_circle
                                    +td_circle
                                    +td_circle

                section.provider-features
                    .vcenter
                        p Providers (other than <b>homebrew</b> & <b>macports</b>) track package installation at <b>/var/db/.puppet_{provider}_installed_{package_name}</b>
                        p &nbsp;
                        p Therefore, to re-install, you must <b>delete</b> the file above before running boxen again

                section
                    .vcenter
                        h2 Boxen Limitations
                        p The <b>primary</b> limitation is that it's not (yet?) able to install software from the Apple App Store
                        p &nbsp;
                        p Otherwise install and configure your entire system automatically without manual steps
                        p The time cost is primarily download time


                section
                    .vcenter
                        h2 Getting Started:<br/>Customize & Iterate
                        ul
                            li Edit
                                ul
                                    li modules
                                    li packages
                                    li people
                                    li ...
                            li re-run <b>/opt/boxen/script/boxen</b>


                section
                    .vcenter
                        h2 Puppet Terms:<br/>Basic Structure
                        p: span.small: b (Highly, highly simplified)
                        table
                            tbody
                                tr
                                    td Module
                                    td Effectively Puppet's "library" unit
                                tr
                                    td Manifest
                                    td The file containing the description/script
                                tr
                                    td Resource
                                    td A unit of configuration (e.g., "file", "package")
                                tr
                                    td Class
                                    td A singleton managing Resources
                                tr
                                    td Defined Type
                                    td Can have more than one instance managing Resources

                        p: a(href="http://docs.puppetlabs.com/references/glossary.html")
                            | Puppet Glossary
                            +external
                        p In general, "Module" has at least one "Manifest" which has at least one "Class"

                section
                    .vcenter
                        h2 Puppet Terms:<br/>Resources
                        p Every resource has:
                        ul
                            li Type (such as <b>package</b>, <b>file</b>, <b>exec</b>, ...)
                            li Title
                            li >1 attributes
                                ul
                                    li e.g., an "ensure" attribute with a value of "present"
                        p &nbsp;
                        p Resources can (and often do) depend on other resources
                        p Puppet will build a dependency graph to make sure everything is applied in the correct order
                        p Each resource title must be unique in the DAG


                section
                    .vcenter
                        h2 Puppet Terms:<br>Misc
                        table
                            tbody
                                tr
                                    td Facts (Facter)
                                    td Descrete information about the machine (FQDN, IP addr, OS, etc.) gathered by "facter"
                                tr
                                    td Puppet Librarian
                                    td Used for managing Puppet Modules
                                tr
                                    td Hiera
                                    td <u>Hiera</u>rchical data: a flexible way of providing configuration data based on "facts"
                                tr
                                    td Profiles & Roles
                                    td Not covered here, but a Puppet Enterprise convention for organizing Hiera data

                section
                    .vcenter
                        h2 Boxen Terms
                        table
                            tbody
                                tr
                                    td User
                                    td Defined by the "fact": <code>::boxen_user</code>
                                tr
                                    td Project
                                    td A grouping meant for "make sure people on this team have at least this configuration"; you can have multiple "projects" applied to a machine

                section
                    .vcenter
                        h2 Packages

                        p Packages are the primary way software is installed.
                            a(href="http://docs.puppetlabs.com/references/latest/type.html#package")
                                +external

                        p Simple example:

                        pre: code.puppet.
                            package { 'gradle':
                                ensure   => "installed", # *
                                provider => "homebrew",
                            }

                            package { "IntelliJ-IC-12.1.4":
                                provider => 'appdmg_eula',
                                source   => "http://download.jetbrains.com/idea/ideaIC-12.1.4.dmg",
                            }

                        p * typically defaults to "present". Valid values vary by resource type & provider.  May include <b>installed, latest, absent,</b> or a specific version/version range (e.g., <b>">= 1.12"</b>)

                section
                    h1 Other Resources

                section
                    .vcenter
                        h2 File

                        p: a(href="http://docs.puppetlabs.com/references/latest/type.html#file") Puppet File Documentation
                            +external

                        pre: code.puppet.
                            $home = "/Users/${::boxen_user}" # 1

                            file { "${home}/.zshrc":
                              source => 'puppet:///modules/people/jdigger/zshrc', # 2
                            }

                            file { "${home}/.zshenv":
                              content => template('people/jdigger/zshenv.erb'), # 3
                            }
                        ol
                            li define a variable based on a "fact"
                            li a static file from a module
                            li set the content from a template (Ruby ERB by default)

                section
                    .vcenter
                        h2 Repository

                        p: a(href="https://github.com/boxen/puppet-repository") GitHub Repository
                            +external

                        pre: code.puppet.
                            $home = "/Users/${::boxen_user}"
                            $srcdir = "${home}/src"

                            repository { "${srcdir}/git-process" :
                              source   => 'https://github.com/jdigger/git-process.git',
                              path     => "${srcdir}/git-process",
                              provider => 'git',
                            }

                section
                    .vcenter
                        h2 Ruby Gem

                        pre: code.puppet.
                            $ruby_version = '1.9.3'

                            ruby::gem { "git-process for ${ruby_version}": # 1
                                gem     => 'git-process',
                                ruby    => $ruby_version, # 2
                                version => '~> 2.0', # 3
                            }

                        ol
                            li because there could be potentially more than one installation of the gem (in the various rbenv versions) it's a good idea to put the Ruby version in the resource name so it is guaranteed to be unique
                            li the version of Ruby (using rbenv) to install the gem into
                            li of course gem versions can use the semantic versioning support of Ruby Gems

                section
                    .vcenter
                        h2 Plist

                        p example of configuring Adium
                        pre: code.puppet.
                            property_list_key { 'Adium users':
                              path       => "${home}/Library/Application Support/Adium 2.0/Users/Default/Accounts.plist",
                              key        => 'Accounts',
                              value      => [
                                {
                                  'Service'  => 'GTalk',
                                  'UID'      => $gtalk_name,
                                  'Type'     => 'libpurple-jabber-gtalk',
                                  'ObjectID' => '1',
                                },
                                {
                                  'Service'  => 'Yahoo!',
                                  'UID'      => $yahoo_name,
                                  'Type'     => 'libpurple-Yahoo!',
                                  'ObjectID' => '2',
                                },
                                {
                                  'Service'  => 'AIM',
                                  'UID'      => $aim_name,
                                  'Type'     => 'libpurple-oscar-AIM',
                                  'ObjectID' => '3',
                                },
                              ],
                              value_type => 'array',
                            }

                section
                    .vcenter
                        p Requires the <a href="https://github.com/glarizza/puppet-property_list_key">"glarizza/puppet-property_list_key" module</a>
                        p See the <a href="https://developer.apple.com/librarY/mac/documentation/Darwin/Reference/ManPages/man1/plutil.1.html">plutil man page</a>

                section
                    .vcenter
                        h2 OSX
                        pre: code.puppet.
                            boxen::osx_defaults { 'scrollbars always on':
                              domain => 'NSGlobalDomain',
                              key    => 'AppleShowScrollBars',
                              value  => 'Always',
                              user   => $::boxen_user,
                            }

                            osx::recovery_message { 'If this Mac is found, please call 555-555-5555': }

                            include osx::finder::unhide_library

                        p See the <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/defaults.1.html">defaults man page</a>

                        p An awesome list of available settings/tools can be found at <a href="https://github.com/kevinSuttle/OSXDefaults">OSXDefaults</a>

                section
                    .vcenter
                        h2 Exec

                        p: a(href="http://docs.puppetlabs.com/references/latest/type.html#exec") Puppet Exec Documentation
                            +external

                        pre: code.puppet.
                            $source_tgz =
                                'http://closure-linter.googlecode.com/files/closure_linter-latest.tar.gz' # 1

                            exec { 'install gjslint': # 2
                                command => "easy_install ${source_tgz}",
                                user    => 'root', # 3
                                creates => '/usr/local/bin/gjslint', # 4
                            }
                        ol
                            li should come in as part of a class definition...
                            li arbitrary resource name: if "command" not given, this is used, but generally best to give it a "meaningful" name
                            li the user to <code>sudo</code> as when executing the command
                            li before running the command the existence of this file is checked; if it's there it's assume this has already run

                section
                    .vcenter
                        p Instead of "creates", you can use "onlyif"/"unless" to run a command, such as
                        pre: code.puppet.
                            unless => 'grep root /usr/lib/cron/cron.allow 2>/dev/null'

                include fragments/classes_and_types.jade

                section
                    h1 Resource Defaults

                section
                    .vcenter
                        p repo/manifests/site.pp (simplified)
                        pre: code.puppet.
                            Exec {
                              group => 'staff',
                              user  => $boxen_user,
                              path  => [
                                "${boxen::config::home}/rbenv/shims",
                                "${boxen::config::home}/rbenv/bin",
                                "${boxen::config::home}/homebrew/bin",
                                '/usr/bin', '/bin', '/usr/sbin', '/sbin',
                              ],
                            }

                            File {
                              group => 'staff',
                              owner => $boxen_user,
                            }

                            Package {
                              provider => homebrew,
                            }

                            Repository {
                              provider => git,
                            }

                            Service {
                              provider => ghlaunchd,
                            }

                include fragments/boxen_structure.jade

                section
                    .vcenter
                        p You can set your own personal/private custom Facts in <code>~/.boxen/config.json</code>

                section
                    .vcenter
                        h2 Use Case: Private vs Personal

                        p Typical personal configuration goes in <code>modules/${::github_login}</code>, which is <b>public</b> to a boxen repo
                        p This is generally&nbsp;
                            a(href="http://zachholman.com/2010/08/dotfiles-are-meant-to-be-forked/")a <b>very</b> good thing
                                +external

                section
                    .vcenter
                        p
                            +warn
                            | However, some facts do not belong in a public location (Passwords, SSH keys, OAuth tokens, etc.)
                            +warn

                section
                    .vcenter
                        p For configuration that can easily be turned into "data" -- especially if it would be used in multiple places when configuring the system (e.g., user names and passwords) -- the <code>~/.boxen/config.json</code> file is perfect

                section
                    .vcenter
                        p For configuration that's more complex, like your <code>~/.ssh</code> directory, create a private https://bitbucket.org/[BitBucket repository], or encrypted .zip in Dropbox, or ...

                section
                    .vcenter
                        p Keep it <b>simple</b> and secure: You want it to be easily accessible before the rest of your system is set up

                section
                    h1 Tips

                section
                    .vcenter
                        h2 General

                        ul
                            li Use the <code>--noop</code> option
                            li <b>Don't install/configure your machine except via Boxen</b> (this is a culture shift, but worth it)
                            li The <code>--debug</code> output has a wealth of information, but can be overwhealming
                            li Don't forget it's all code and backed by git: use the forking and branching processes you normally would
                            li Design your classes using parameters and facts, keeping Hiera in mind
                            li Especially if you're creating modules "for realz" (or are just suitably paranoid), run in a VM: <a href="http://thezinx.com/2013/10/29/create-bootable-dmg-iso-mavericks-app.html">Creating an ISO</a>

                section
                    .vcenter
                        h2 Infrastructure As Code

                        p: b Don't forget it's all code and backed by git

                        p Use the forking and branching processes you normally would

                        p merge with the upstream (e.g., +boxen/our-boxen+) often
                        pre: code.puppet.
                            git remote add boxen https://github.com/boxen/our-boxen.git
                            git fetch --all
                            git merge boxen/master
                        p
                            +warn
                            | When you get merge conflicts on <code>*.lock</code> files, <a href="https://github.com/boxen/our-boxen/blob/master/docs/faq.md">see the FAQ</a>

                        p Make use of other people's modules, and post your own!

                section
                    .vcenter
                        h2 Re-use by Module

                        p Create <code>modules/packages/</code> for general-purpose Puppet classes to share across users or projects

                        p.strong Publish useful packages

                        p OSS benefits all, and the "packages" module and its like should be considered temporary/stop-gap

                        p This also works well for "proprietary" software/configurations (though those may be published on an internal repo instead of a public one)

                section
                    .vcenter
                        h2 Avoid 'node default'

                        p The default <code>repo/manifests/site.pp</code> contains a <code>node default</code> section that will get loaded up on every machine

                section
                    .vcenter
                        p.strong There's two problems with it:
                        ul
                            li The "out of the box" list contains a bunch of stuff that non-GitHub.com people may or may not care about having loaded up on their machine (e.g. NodeJS, ngnix, 4 versions of Ruby)
                            li <code>node default</code> doesn't allow changing configuration values, etc.

                section
                    .vcenter
                        p It's a legacy of Puppet 1.0, long before much more flexible mechanisms like Hiera

                section
                    .vcenter
                        h2 Use Hiera

                        p A much better approach is replace 'node default' in 'site.pp' with
                        pre: code.puppet.
                            if hiera_array('classes', undef) {
                              hiera_include('classes')
                            }

                        p Then, if you want to make sure everyone's got Ruby set up, set <code>hiera/common.yaml</code>
                        pre: code.yaml.
                            classes:
                              - ruby::global
                            ruby::global::version: "2.1.1"
                            ruby::rbenv_plugins:
                              ruby-build:
                                ensure: v20140420
                                source: sstephenson/ruby-build

                section
                    .vcenter
                        h2 Hiera Power

                        p With <a href="https://github.com/jdigger/boxen/blob/d5502c936d5d7aaa0212a6d2fb00f2d0d6be4c70/modules/packages/manifests/sublime_text_2_package_management.pp">a simple shim</a> you can do things like...

                section
                    .vcenter
                        p hiera/developer.yaml
                        pre: code.yaml.
                            sublime_text_2::packages:
                              'BracketHighlighter':
                                source: 'facelessuser/BracketHighlighter'
                              'CodeIntel':
                                source: 'SublimeCodeIntel/SublimeCodeIntel'
                              'Git':
                                source: 'kemayo/sublime-text-git'
                              'GitGutter':
                                source: 'jisaacks/GitGutter'

                section
                    .vcenter
                        p hiera/users/jdigger.yaml
                        pre: code.yaml.
                            sublime_text_2::packages:
                              'AsciiDoc':
                                source: 'SublimeText/AsciiDoc'
                              'Markdown-Preview':
                                source: 'revolunet/sublimetext-markdown-preview'
                              'PrettyJson':
                                source: 'dzhibas/SublimePrettyJson'
                              'Puppet':
                                source: 'russCloak/SublimePuppet'

                section
                    .vcenter
                        h2 Hiera Structure

                        p For example in <code>repo/config/hiera.yaml</code>
                        pre: code.yaml.
                            ---
                            :merge_behavior: deeper
                            :backends:
                              - yaml
                            :yaml:
                              :datadir: "%{::boxen_home}/repo/hiera"
                            :hierarchy:
                              - "users/%{::github_login}/nodes/%{::hostname}"
                              - "users/%{::github_login}/nodes/common"
                              - "users/%{::github_login}"
                              - "projects/%{::boxen_project_01}"
                              - "projects/%{::boxen_project_02}"
                              - "projects/%{::boxen_project_03}"
                              - "projects/%{::boxen_project_04}"
                              - "projects/%{::boxen_project_05}"
                              - "projects/%{::boxen_project_06}"
                              - "projects/%{::boxen_project_07}"
                              - "projects/%{::boxen_project_08}"
                              - "projects/%{::boxen_project_09}"
                              - "projects/%{::boxen_project_10}"
                              - "projects/common"
                              - "common"

                section
                    .vcenter
                        h2 Roles

                        p More advanced, but it can be worth borrowing some techniques from Puppet Enterprise

                section
                    .vcenter
                        p modules/people/jdigger/applications.pp
                        pre: code.puppet.
                            class people::jdigger::applications ($system_roles = undef) {
                              $_system_roles = hiera_array('people::jdigger::system_roles', [])
                              $roles = $system_roles ? { undef => $_system_roles, default => $system_roles}

                              include people::jdigger::applications::general

                              if member($roles, 'work') {
                                include 'people::jdigger::applications::work'
                              }
                              if member($roles, 'personal') {
                                include 'people::jdigger::applications::personal'
                              }
                            }

                section
                    .vcenter
                        p hiera/users/jdigger/nodes/imac.yaml
                        pre: code.yaml.
                            boxen::security::require_password: false
                            people::jdigger::system_roles:
                              - personal

                section
                    .vcenter
                        p modules/people/jdigger/applications/personal.pp
                        pre: code.puppet.
                            class people::jdigger::applications::personal {
                              include 'calibre'
                              include 'steam'
                            }

                section
                    h1 Troubleshooting

                section
                    .vcenter
                        h2 Troubleshooting Resources
                        ul
                            li: a(href="http://stackoverflow.com/questions/22352838/ruby-gem-install-json-fails-on-mavericks-and-xcode-5-1-unknown-argument-mul") XCode 5.1
                            li: a(href="https://github.com/boxen/our-boxen/blob/master/docs/faq.md") Read the FAQ
                            li: a(href="https://github.com/boxen/our-boxen/blob/master/docs/faq.md") Seriously, read the FAQ

                section
                    h1 Summary

                section.summary
                    .vcenter
                        p.strong Easy to start
                section.summary
                    .vcenter
                        p.strong Easy to iterate
                section.summary
                    .vcenter
                        p.strong Fast return on investment
                section.summary
                    .vcenter
                        p.strong Installation + Configuration
                section.summary
                    .vcenter
                        p.strong All the advantages of source control

                section
                    .vcenter
                        h2 Resources

                        ul
                            li: a(href="https://boxen.github.com/") Boxen Homepage
                            li: a(href="http://garylarizza.com/blog/2013/02/15/puppet-plus-github-equals-laptop-love/") A good blog entry
                            li: a(href="http://www.dmuth.org/node/1431/tweaking-boxen-osx") Another (shorter) blog entry
                            li: a(href="http://docs.puppetlabs.com/learning/") Learning Puppet
                            li: a(href="https://github.com/jdigger/boxen.git") Jim's Boxen
                            li: a(href="https://webconference.twcable.com/p7oudsr7jp4/") Recording of brown-bag Jim gave at TWC

                section
                    h1 Q & A

                include fragments/reveal_config.jade
